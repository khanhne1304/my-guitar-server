import { spawn } from 'child_process';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu kh√≥a h·ªçc t∆∞∆°ng t√°c ho√†n ch·ªânh...\n');

// Danh s√°ch c√°c script c·∫ßn ch·∫°y theo th·ª© t·ª±
const scripts = [
  'seedAdmin.js',
  'seedInteractiveCourses.js',
  'updateCourseData.js',
  'addMoreInteractiveData.js',
  'checkInteractiveData.js'
];

async function runScripts() {
  for (const script of scripts) {
    console.log(`üìù ƒêang ch·∫°y ${script}...`);
    
    try {
      await new Promise((resolve, reject) => {
        const child = spawn('node', [path.join(__dirname, script)], {
          stdio: 'inherit',
          shell: true
        });
        
        child.on('close', (code) => {
          if (code === 0) {
            console.log(`‚úÖ Ho√†n th√†nh ${script}\n`);
            resolve();
          } else {
            console.log(`‚ùå L·ªói khi ch·∫°y ${script} (exit code: ${code})\n`);
            reject(new Error(`Script ${script} failed with exit code ${code}`));
          }
        });
        
        child.on('error', (error) => {
          console.log(`‚ùå L·ªói khi ch·∫°y ${script}:`, error.message);
          reject(error);
        });
      });
    } catch (error) {
      console.log(`‚ö†Ô∏è  B·ªè qua ${script} do l·ªói:`, error.message);
      // Ti·∫øp t·ª•c ch·∫°y script ti·∫øp theo
    }
  }
  
  console.log('üéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu kh√≥a h·ªçc t∆∞∆°ng t√°c ho√†n ch·ªânh!');
  console.log('\nüìã D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫°o:');
  console.log('   ‚úÖ Admin user');
  console.log('   ‚úÖ 5 kh√≥a h·ªçc t∆∞∆°ng t√°c v·ªõi ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu');
  console.log('   ‚úÖ 7 modules v·ªõi 13 b√†i h·ªçc');
  console.log('   ‚úÖ TabData chi ti·∫øt cho m·ªói b√†i h·ªçc');
  console.log('   ‚úÖ Timeline v√† exercises');
  console.log('   ‚úÖ Feedback v√† th·ªëng k√™');
  console.log('   ‚úÖ Metronome integration');
  console.log('   ‚úÖ Practice interface data');
  console.log('\nüé∏ S·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng giao di·ªán h·ªçc t∆∞∆°ng t√°c!');
}

runScripts().catch((error) => {
  console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu:', error.message);
  process.exit(1);
});








