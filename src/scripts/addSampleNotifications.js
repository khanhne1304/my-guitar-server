import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Notification from '../models/Notification.js';

dotenv.config();

const addSampleNotifications = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('Connected to MongoDB');

    const sampleNotifications = [
      {
        title: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi My Guitar!',
        content: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n. H√£y kh√°m ph√° c√°c s·∫£n ph·∫©m guitar v√† piano ch·∫•t l∆∞·ª£ng cao c·ªßa ch√∫ng t√¥i.',
        type: 'general',
        priority: 'medium',
        targetAudience: 'all',
        isActive: true,
        scheduledAt: new Date(),
        actionUrl: '/products',
        actionText: 'Xem s·∫£n ph·∫©m'
      },
      {
        title: 'üéâ Khuy·∫øn m√£i ƒë·∫∑c bi·ªát - Gi·∫£m 20% t·∫•t c·∫£ guitar!',
        content: 'Nh√¢n d·ªãp khai tr∆∞∆°ng, ch√∫ng t√¥i d√†nh t·∫∑ng b·∫°n ∆∞u ƒë√£i gi·∫£m 20% cho t·∫•t c·∫£ s·∫£n ph·∫©m guitar. √Åp d·ª•ng t·ª´ h√¥m nay ƒë·∫øn h·∫øt th√°ng.',
        type: 'promotion',
        priority: 'high',
        targetAudience: 'all',
        isActive: true,
        scheduledAt: new Date(),
        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ng√†y
        actionUrl: '/products?category=guitar',
        actionText: 'Mua ngay'
      },
      {
        title: 'üì¶ ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng!',
        content: 'ƒê∆°n h√†ng #12345 ƒë√£ ƒë∆∞·ª£c giao ƒë·∫øn ƒë·ªãa ch·ªâ c·ªßa b·∫°n. C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† ·ªßng h·ªô My Guitar!',
        type: 'order',
        priority: 'medium',
        targetAudience: 'registered',
        isActive: true,
        scheduledAt: new Date(),
        actionUrl: '/checkout-history',
        actionText: 'Xem l·ªãch s·ª≠ ƒë∆°n h√†ng'
      },
      {
        title: 'üõçÔ∏è S·∫£n ph·∫©m m·ªõi: Fender Stratocaster Professional',
        content: 'Ch√∫ng t√¥i v·ª´a nh·∫≠p v·ªÅ d√≤ng guitar Fender Stratocaster Professional v·ªõi √¢m thanh tuy·ªát v·ªùi. H√£y ƒë·∫øn showroom ƒë·ªÉ tr·∫£i nghi·ªám!',
        type: 'product',
        priority: 'medium',
        targetAudience: 'all',
        isActive: true,
        scheduledAt: new Date(),
        actionUrl: '/products',
        actionText: 'Xem s·∫£n ph·∫©m'
      },
      {
        title: '‚öôÔ∏è C·∫≠p nh·∫≠t h·ªá th·ªëng - Th·ªùi gian b·∫£o tr√¨',
        content: 'H·ªá th·ªëng s·∫Ω ƒë∆∞·ª£c b·∫£o tr√¨ t·ª´ 2:00 - 4:00 s√°ng ng√†y mai ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t. Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y.',
        type: 'system',
        priority: 'urgent',
        targetAudience: 'all',
        isActive: true,
        scheduledAt: new Date(),
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 gi·ªù
      },
      {
        title: 'üéµ B√†i h√°t m·ªõi: "Hotel California" - Eagles',
        content: 'Ch√∫ng t√¥i ƒë√£ th√™m b√†i h√°t "Hotel California" c·ªßa Eagles v√†o th∆∞ vi·ªán. H√£y th·ª≠ luy·ªán t·∫≠p v·ªõi h·ª£p √¢m n√†y!',
        type: 'general',
        priority: 'low',
        targetAudience: 'all',
        isActive: true,
        scheduledAt: new Date(),
        actionUrl: '/songs',
        actionText: 'Xem b√†i h√°t'
      }
    ];

    // X√≥a th√¥ng b√°o c≈© n·∫øu c√≥
    await Notification.deleteMany({});
    console.log('Cleared existing notifications');

    // Th√™m th√¥ng b√°o m·∫´u
    const notifications = await Notification.insertMany(sampleNotifications);
    console.log(`Added ${notifications.length} sample notifications`);

    console.log('Sample notifications added successfully!');
  } catch (error) {
    console.error('Error adding sample notifications:', error);
  } finally {
    await mongoose.disconnect();
    console.log('Disconnected from MongoDB');
  }
};

addSampleNotifications();
